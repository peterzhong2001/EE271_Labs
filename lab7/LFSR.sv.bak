module LFSR (clk, reset, out);
	input logic clk, reset;
	output logic [9:0] out;
	logic q10, q9, q8, q7, q6, q5, q4, q3, q2, q1;
	
	assign out = {q10, q9, q8, q7, q6, q5, q4, q3, q2, q1};
	
	always_ff @(posedge clk) begin
		if (reset)
			{q10, q9, q8, q7, q6, q5, q4, q3, q2, q1} <= 10'b0000000000;
		else begin
			q10 <= ~(q3 ^ q1);
			q9 <= q10;
			q8 <= q9;
			q7 <= q8;
			q6 <= q7;
			q5 <= q6;
			q4 <= q5;
			q3 <= q4;
			q2 <= q3;
			q1 <= q2;
		end
	end
endmodule 

module LFSR_testbench();
	logic CLOCK_50, reset;
	logic [9:0] out;

	LFSR dut (.clk(CLOCK_50), .out);
	
	// Set up a simulated clock.
	parameter CLOCK_PERIOD = 100;
	initial begin
		CLOCK_50 <= 0;
		forever #(CLOCK_PERIOD/2) CLOCK_50 <= ~CLOCK_50; // Forever toggle the clock
	end
	
	// Test the design
	initial begin
		reset <= 1; repeat(5) @(posedge CLOCK_50);
		reset <= 0; repeat(30) @(posedge CLOCK_50);
		$stop; // end the simulation
	end
endmodule 